# This is a basic workflow to help you get started with Actions
name: lldelisle
# Controls when the action will run. 
on:
  schedule:
    - cron: "0 4 * * 14"
  push:
   branches: [ main ]
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout autoupdate
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
        repository: planemo-autoupdate/autoupdate
        ref: main
        path: autoupdate

    - name: Checkout planemo-autoupdate/tools-lldelisle
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
        repository: planemo-autoupdate/tools-lldelisle
        ref: master
        path: galaxytools
        
    - uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Cache downloads
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: cache-${{ matrix.python-version }}

    - name: Run a multi-line script
      run: |

        echo "Installing planemo..."
        pip3 install https://github.com/galaxyproject/planemo/archive/refs/heads/master.zip

        # git credentials
        git config --global user.email "sbray@informatik.uni-freiburg.de"
        git config --global user.name "planemo-autoupdate"
        echo ${{ secrets.PAT }} > token.txt
        gh auth login --with-token < token.txt
        
        BASEDIR=`pwd`
        cd tools-lldelisle
        echo "Adding upstream..."
        git remote add upstream https://github.com/lldelisle/tools-lldelisle.git

        echo "Getting git remote..."
        git remote -v

        echo "Pulling latest from upstream..."
        git fetch --all
        
        REPOS=$(planemo ci_find_repos)
        echo $REPOS
        for REPO in $REPOS; do
          echo $REPO
          # checkout branch, create if it doesn't exist
          if [[ $(gh pr list --limit 10000 | grep planemo-autoupdate:$REPO) ]]
          then
            echo "PR exists, we will checkout the branch and add to it"
            git checkout --track origin/$REPO
          else
            if [[ $(git branch -a --list origin/$REPO) ]]
            then
              echo "Branch exists without an open PR - deleting"
              git push origin --delete $REPO
            fi
            echo "Creating branch and checking out"
            git checkout -b $REPO upstream/master
          fi
          git branch
          echo "Running autoupdate command..."
          cd $REPO
          # --test --update_test_data
          # planemo autoupdate . --skiplist $BASEDIR/autoupdate/lldelisle_skip_list > $BASEDIR/autoupdate.log
          planemo autoupdate . > $BASEDIR/autoupdate.log
          rm -f tool_test_output.*
          cd $BASEDIR/tools-lldelisle

          if [[ $(git diff) ]]
          then
            git status
            TITLE=$(python3 $BASEDIR/autoupdate/pr_text.py --repo $REPO --log $BASEDIR/autoupdate.log --shed $REPO/.shed.yml --out $BASEDIR/body.txt)

            echo "Adding..."
            git add .

            echo "Committing..."
            git commit -m "$TITLE"

            echo "Push branch to remote..."
            git push --set-upstream origin $REPO
            
            OLD_TITLE=$(gh pr list --limit 10000 | grep planemo-autoupdate:$REPO | cut -f 2)
            if [[ $OLD_TITLE ]] # just need to update PR title
            then
              if [[ $OLD_TITLE == *\) ]] # older PRs
              then
                NEW_TITLE=$(echo $OLD_TITLE | cut --complement -f 4 -d ' ' && echo  " to " && echo $TITLE | cut -f 7 -d ' ')
              else # newer PRs
                NEW_TITLE=$(echo $OLD_TITLE | cut --complement -f 7 -d ' ' && echo $TITLE | cut -f 7 -d ' ')
              fi
              PR_NUMBER=$(gh pr list --limit 10000 | grep planemo-autoupdate:$REPO | cut -f 1)
              gh pr edit $PR_NUMBER -t "$NEW_TITLE"
            else # we need to create a PR
              echo "Creating a PR..."
              gh pr create --base master --head planemo-autoupdate:$REPO --title "$TITLE" --repo lldelisle/tools-lldelisle --body-file $BASEDIR/body.txt
            fi
          fi
        done
